{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Railway Operation Simulator Timetable Editor Welcome to the main documentation site for the Railway Operation Simulator Timetable Editor by the Railway Operation Simulator development team . The purpose of this application is to complement the brilliant Railway Operation Simulator by Albert Ball, offering various \"smart\" features to simplify the process of timetable creation via a user interface. Development Team Kristian Zarebski (Lead Programmer and Designer) Albert Ball (Testing and Development) Daniel Gill (Documentation and Testing)","title":"Home"},{"location":"#railway-operation-simulator-timetable-editor","text":"Welcome to the main documentation site for the Railway Operation Simulator Timetable Editor by the Railway Operation Simulator development team . The purpose of this application is to complement the brilliant Railway Operation Simulator by Albert Ball, offering various \"smart\" features to simplify the process of timetable creation via a user interface. Development Team Kristian Zarebski (Lead Programmer and Designer) Albert Ball (Testing and Development) Daniel Gill (Documentation and Testing)","title":"Railway Operation Simulator Timetable Editor"},{"location":"call_point/","text":"","title":"Adding Calling Points"},{"location":"consists/","text":"","title":"The Consist Editor"},{"location":"contrib/","text":"","title":"Contribution Guidelines"},{"location":"global/","text":"","title":"Global Options"},{"location":"install/","text":"Installation ROSTTBEditor has been confirmed to work under Windows 10. To install simply download the latest release from the GitHub repository and place in a user accessible location. To launch the program simply run the included executable.","title":"Installation"},{"location":"install/#installation","text":"ROSTTBEditor has been confirmed to work under Windows 10. To install simply download the latest release from the GitHub repository and place in a user accessible location. To launch the program simply run the included executable.","title":"Installation"},{"location":"qt/","text":"Compiling and deploying Qt applications for Windows Download and install the open-source version of Qt for Windows from https://www.qt.io/download-qt-installer. It takes a LONG time, even on a fast computer, so be patient or do something else while you are waiting. Create a desktop shortcut for QtCreator.exe - the file is located here: <user chosen Qt directory>\\Qt5.14.2\\Tools\\QtCreator\\bin\\qtcreator.exe Qt5.14.2 was the directory of the current version when this note was written but may have been updated for later downloads - select the up-to-date version. Download the required Qt project from GitHub. Fire up QtCreator, click 'Open' and navigate to and select the Qt project file ending in .pro . If this is successful it will show 'Configure Project' with a number of boxes ticked. Untick all except 'Desktop Qt 5.14.2 MinGW 32 Bit' (or later version than 5.14.2 if one was downloaded). Click 'Configure project'. If successful the project's files will be shown in the left hand area of the screen. From the 'Build' menu at the top select 'Build for run configuration \"project name\" '. This normally takes several seconds so wait until it finishes (optionally you can specify if this is either a debug build or release build). After this there should be a new directory named something like: build-ROSTTBGen-Desktop_Qt_5_14_2_MinGW_32_bit-Debug where 'ROSTTBGen' is the project's name and may be different. It will be located at the same level as the directory that contained the project file selected above, note in the case of a release build the suffix will be Release . Inside this directory there is a directory named debug / release , and inside that an executable file (extension .exe ) for Windows. Copy the executable into a new directory ready for release. Note this executable will not work without the required dll files and plugins. Firstly you should copy all dll files from <user chosen Qt directory>\\Qt<version>\\<version>\\mingw73_32\\bin into the same folder. Then copy all directories within the <user chosen Qt directory>\\Qt<version>\\<version>\\mingw<ming_version>\\plugins folder to the same location as the executable. Rename your Qt installation folder to QtInstall temporarily and try running the executable. If it runs successfully try deleting the dlls within the executable folder. Those which can be deleted are not required in the final release.","title":"Compilation and Deployment"},{"location":"qt/#compiling-and-deploying-qt-applications-for-windows","text":"Download and install the open-source version of Qt for Windows from https://www.qt.io/download-qt-installer. It takes a LONG time, even on a fast computer, so be patient or do something else while you are waiting. Create a desktop shortcut for QtCreator.exe - the file is located here: <user chosen Qt directory>\\Qt5.14.2\\Tools\\QtCreator\\bin\\qtcreator.exe Qt5.14.2 was the directory of the current version when this note was written but may have been updated for later downloads - select the up-to-date version. Download the required Qt project from GitHub. Fire up QtCreator, click 'Open' and navigate to and select the Qt project file ending in .pro . If this is successful it will show 'Configure Project' with a number of boxes ticked. Untick all except 'Desktop Qt 5.14.2 MinGW 32 Bit' (or later version than 5.14.2 if one was downloaded). Click 'Configure project'. If successful the project's files will be shown in the left hand area of the screen. From the 'Build' menu at the top select 'Build for run configuration \"project name\" '. This normally takes several seconds so wait until it finishes (optionally you can specify if this is either a debug build or release build). After this there should be a new directory named something like: build-ROSTTBGen-Desktop_Qt_5_14_2_MinGW_32_bit-Debug where 'ROSTTBGen' is the project's name and may be different. It will be located at the same level as the directory that contained the project file selected above, note in the case of a release build the suffix will be Release . Inside this directory there is a directory named debug / release , and inside that an executable file (extension .exe ) for Windows. Copy the executable into a new directory ready for release. Note this executable will not work without the required dll files and plugins. Firstly you should copy all dll files from <user chosen Qt directory>\\Qt<version>\\<version>\\mingw73_32\\bin into the same folder. Then copy all directories within the <user chosen Qt directory>\\Qt<version>\\<version>\\mingw<ming_version>\\plugins folder to the same location as the executable. Rename your Qt installation folder to QtInstall temporarily and try running the executable. If it runs successfully try deleting the dlls within the executable folder. Those which can be deleted are not required in the final release.","title":"Compiling and deploying Qt applications for Windows"},{"location":"quickstart/","text":"Quickstart This guide provides a quick start overview of how to use the application interface. When opened ROSTTBEditor presents the user with a single window with two main view panels and a series of options relating to customisation and creation of services. Setup Firstly the application must be directed to a local installation of Railway Operation Simulator. This allows the program to quickly display timetables and routes within the program's folders when opening files: Click the Set ROS Location button. Browse for the railway.exe executable within your Railway Operation Simulator installation. Click Open . When the executable has been successfully set the address will appear at the top of the window: Opening a Railway To create a timetable you must first load the timetable for the route to be simulated: Click the Route button. Browse for the route .rly file. Click Open . Creating a Timetable When the application is opened a new timetable is already loaded, however to start the creation from scratch go to File > New .","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"This guide provides a quick start overview of how to use the application interface. When opened ROSTTBEditor presents the user with a single window with two main view panels and a series of options relating to customisation and creation of services.","title":"Quickstart"},{"location":"quickstart/#setup","text":"Firstly the application must be directed to a local installation of Railway Operation Simulator. This allows the program to quickly display timetables and routes within the program's folders when opening files: Click the Set ROS Location button. Browse for the railway.exe executable within your Railway Operation Simulator installation. Click Open . When the executable has been successfully set the address will appear at the top of the window:","title":"Setup"},{"location":"quickstart/#opening-a-railway","text":"To create a timetable you must first load the timetable for the route to be simulated: Click the Route button. Browse for the route .rly file. Click Open .","title":"Opening a Railway"},{"location":"quickstart/#creating-a-timetable","text":"When the application is opened a new timetable is already loaded, however to start the creation from scratch go to File > New .","title":"Creating a Timetable"},{"location":"rly_parse/","text":"","title":"Route Parsing"},{"location":"route/","text":"","title":"Opening a Route"},{"location":"service/","text":"","title":"Introduction"},{"location":"start_loc/","text":"","title":"Start Locations"},{"location":"start_types/","text":"","title":"Service Types"},{"location":"ttb_parse/","text":"","title":"Timetable Parsing"}]}